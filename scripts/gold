/*
========================================================
Gold Layer Star Schema Creation
========================================================

Script Purpose:
    This script creates the gold layer star schema for analytical reporting
    and business intelligence. The star schema consists of:
    - Dimension tables for customers and products (as views)
    - Fact table for sales transactions
    - Optimized structure for OLAP queries and reporting tools

Key Components:
    - gold.dim_customers: Customer dimension with integrated CRM/ERP data
    - gold.dim_products: Product dimension with category information  
    - gold.fact_sales: Sales fact table with measures and foreign keys

Business Value:
    - Enables fast analytical queries for sales reporting
    - Supports business intelligence dashboards and KPIs
    - Provides single source of truth for sales analytics
    - Facilitates data exploration and ad-hoc analysis

Usage Notes:
    - Run this script after loading Silver Layer data
    - Views automatically reflect changes in underlying silver tables
    - Use for reporting, analytics, and business intelligence purposes
    - Star schema optimized for read-heavy analytical workloads

Dependencies:
    - silver.crm_cust_info must be populated
    - silver.erp_cust_az12 must be populated  
    - silver.erp_loc_a101 must be populated
    - silver.crm_prd_info must be populated
    - silver.erp_px_cat_g1v2 must be populated
    - silver.crm_sales_details must be populated

========================================================
*/

IF OBJECT_ID('gold.dim_customers','V') is not null
	drop view gold.dim_customers;
	GO
CREATE VIEW gold.dim_customers AS (
SELECT 
ROW_NUMBER() OVER(ORDER BY ci.cst_id) AS customer_key,
ci.cst_id AS customer_id,
ci.cst_key AS customer_number,
ci.cst_firstname AS first_name,
ci.cst_lastname AS last_name,
la.cntry AS country,
ci.cst_marital_status AS marital_status,
CASE WHEN ci.cst_gndr='n/a' and ca.gen<>'n/a' and ca.gen is not null THEN ca.gen
ELSE cst_gndr
END gender,
ca.bdate AS birth_date,
ci.cst_create_date AS create_date

from silver.crm_cust_info ci
LEFT JOIN silver.erp_cust_az12 ca on ci.cst_key=ca.cid
LEFT JOIN silver.erp_loc_a101 la on la.cid=ci.cst_key);
GO

IF OBJECT_ID('gold.dim_products','V')IS NOT NULL
	DROP VIEW gold.dim_products;
	GO
CREATE VIEW gold.dim_products AS(
SELECT 
ROW_NUMBER() OVER(ORDER BY cpi.prd_start_dt,cpi.sls_prd_key) product_key,
cpi.prd_id AS product_id,
cpi.sls_prd_key AS product_number,
cpi.prd_nm AS product_name,
cpi.cat_id AS category_id,
pc.cat AS category,
pc.subcat AS subcategory,
pc.maintenance maintenance,
cpi.prd_cost AS cost,
cpi.prd_line AS product_line,
cpi.prd_start_dt AS start_date,
cpi.prd_end_dt AS end_date
FROM silver.crm_prd_info cpi
LEFT JOIN silver.erp_px_cat_g1v2 pc 
ON pc.id=cpi.cat_id
WHERE cpi.prd_end_dt IS NULL --To only obtain products that are currently available.Filtering out historical data
);
GO

IF OBJECT_ID('gold.fact_sales','V')IS NOT NULL
	DROP VIEW gold.fact_sales;
GO
CREATE VIEW gold.fact_sales AS(
SELECT 
sd.sls_ord_num AS order_number,
c.customer_key AS customer_key,
p.product_key AS product_key,
sls_order_dt AS order_date,
sls_ship_dt AS ship_date,
sls_due_dt AS due_date,
sls_sales AS sales,
sls_quantity AS quantity,
sls_price AS price
FROM silver.crm_sales_details sd
LEFT JOIN gold.dim_customers c
ON sd.sls_cust_id=c.customer_id
LEFT JOIN gold.dim_products p
ON sd.sls_prd_key=p.product_number)
;
GO
select*from gold.fact_sales;


